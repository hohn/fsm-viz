#!/usr/bin/env python3

"""
"""

# Use this file interactively with Tk event loop integration:
# ipython --gui=tk -i -- -g -i
# ~/w/fsm-viz/.venv/bin/ipython --gui=tk -i -- -g -i

from tkinter import ttk
import argparse
import base64
import io
import logging
import os
import collections 
import subprocess
import sys
import tempfile
import tkinter as tk

import fsm_viz 
from dataclasses import dataclass, field

#
#* Handle arguments
#
# Reset arguments for interactive use; requires the -- argument terminator
if 'ipython' in sys.argv[0]:
    try: 
        f = sys.argv.index('--')
        sys.argv = ['fsmviz-simple'] + sys.argv[f+1:None]
    except:
        pass

parser = argparse.ArgumentParser(description='Generate a simple animation')
parser.add_argument('-g', '--gui', action="store_true",
                    help='Display an interactive graphical interface (with Tk)')
parser.add_argument('-i', '--interactive', action="store_true",
                    help='Run interactively inside ipython')
parser.add_argument('-a', '--animated', metavar='FILE', type=str, default="",
                    help='Write an animated gif to FILE')
args = parser.parse_args()

#
#* FSM components
#
# @dataclass
# class RenderPass:
#     nodes_rendered : set = field(default_factory=set)
    
class Environment:
    """Holds configuration (init) values, shared values, and dynamically scoped
    variables.  """

    def __init__(self, args : argparse.Namespace):
        self._channel_color : int = 0
        self.args = args
    
    def new_channel_color(self):
        self._channel_color += 1
        return self._channel_color

class Node:
    def __init__(self, env : Environment, name: str):
        self._name = name
        self._channel_active : dict['Channel', bool] = collections.defaultdict(lambda: False)
        self._target_channel_l : list[tuple['Node', 'Channel']] = []
        self._signal_queue : dict[('Channel', collections.deque)] = \
            collections.defaultdict(collections.deque)
        self._propagation_buffer : list[tuple['Node', 'Channel']] = []

    def outto(self, env, target_channel_l : list[tuple['Node', 'Channel']]):
        self._target_channel_l = target_channel_l

    def signal(self, env, channel: 'Channel'):
        self._signal_queue[channel].append(1)

    def propagate2(self, env):
        # edge-to-node propagation has to happen after all nodes have been
        # processed to avoid signal loss on the node itself.
        for node, channel in self._propagation_buffer:
            node.signal(env, channel)

    def propagate1(self, env):
        # Propagate all signals by one step
        # The signal path is
        #   _signal_queue -> _channel_active -> target node(s)
        #
        # 1. _channel_active -> target node(s)
        # Propagate signal to target nodes
        self._propagation_buffer = buffer = []
        for chan in self._channel_active:
            if self._channel_active[chan]:
                for tgtnode, tgtchan in self._target_channel_l:
                    if tgtchan == chan:
                        buffer.append((tgtnode, chan))
                self._channel_active[chan] = False 

        # 2. _signal_queue -> _channel_active
        for sigchan, sigqueue in self._signal_queue.items():
            if len(sigqueue) > 0:
                # XX:
                # Propagate older signal(s) to channel(s).  New signal(s) only
                # activate this node.  Signals with no outgoing channels are
                # dropped.
                for tgtnode, tgtchan in self._target_channel_l:
                    if tgtchan == sigchan:
                        self._channel_active[sigchan] = True
                sigqueue.popleft()

                
    def _render_node(self, env) -> str:
        color_self = "black"
        style = ""
        fillcolor = "lightblue"
        for chan, queue in self._signal_queue.items():
            if len(queue) > 0:
                color_self = "blue"
                style = "filled"
                fillcolor = "lightblue"
        return 'nd%d [color="%s", style="%s", fillcolor="%s", label="%s"];' % (
            id(self), color_self, style, fillcolor, self._name)

    def _render_edges(self, env) -> list[str]:
        return ['nd{:d} -> nd{:d} [color={!s}];'
                .format(id(self), id(target),
                        channel.color if self._channel_active[channel] else '"#e0e0e0"')
                for target, channel in self._target_channel_l]
        
class Channel:
    def __init__(self, env : Environment):
        self.color : int = env.new_channel_color()

class Fsm:
    def __init__(self, env: Environment, node_l, channel_l):
        self._node_l : list[Node] = node_l
        self._channel_l : list[Channel] = channel_l

    def as_dot(self, env) -> list[str]:
        # header
        header = """digraph fsmviz_simple {
        // configure graph elements
        node [shape=box, fontname="Helvetica", fontsize=11];
        graph [rankdir = "LR", ranksep=1, dpi=150];
        edge [colorscheme=dark28, penwidth=2.0];
        """
        # footer
        footer = """// Footer
        }
        """
        # body 
        nodes = [ node._render_node(env) for node in self._node_l ]
        edges = [ node._render_edges(env) for node in self._node_l ]
        # Return a flattened list of strings with structural comments
        rv =  [header, "// nodes\n"] + nodes + ["// edges\n"]
        for ed in edges: rv.extend(ed)
        rv.append(footer)
        return rv

    def propagate(self, env):
        # Propagate all signals one step
        for node in self._node_l:
            node.propagate1(env)
        for node in self._node_l:
            node.propagate2(env)
    
class RenderDot:
    def __init__(self, env : Environment):
        self._image_png : list = []

    def to_image(self, env, dotreps : list[str]):
        (fd, fname) = tempfile.mkstemp() 
        for line in dotreps: os.write(fd, line.encode())
        os.close(fd)
        result = subprocess.run(['dot', '-Tpng', fname], capture_output=True)
        if result.returncode == 0:
            os.remove(fname)
            self._image_png.append(result.stdout)
        else:
            logging.error("Could not create PNG image: %s", result.stderr)
            logging.error("Remove temporary files after inspection")

    def view(self, env):
        if env.args.gui:
            render._view_tk(env)
        else:
            # TODO: Produce dot / png / svg files
            for line in dot1: print(line)

    def to_gif(self, env, file):
        if len(self._image_png) == 0:
            logging.warning("No images to convert")
            return
        from PIL import Image
        images = [Image.open(io.BytesIO(png)) for png in self._image_png]
        images[0].save(fp=file, format='GIF', append_images=images[1:None],
                       save_all=True, duration=400, loop=0)
        
    def _view_tk(self, env):
        # Display one image from a list and cycle using a slider.
        if len(self._image_png) == 0:
            logging.warning("No images to display")
            return
        if env.args.interactive:
            root = self._display_root = tk.Toplevel()
        else:
            root = self._display_root = tk.Tk()
        enc = base64.b64encode(self._image_png[0]) 
        image = self._display_image = tk.PhotoImage(data=enc)
        # image
        view = tk.Label(root, image=image)
        view.pack()
        # slider / scale
        def _change_image(index):
            enc = base64.b64encode(self._image_png[round(float(index))])
            image = self._display_image = tk.PhotoImage(data=enc)
            view.configure(image=image)
        # The ttk scale is missing resolution and value display.
        tk.Scale(root, command=_change_image, from_=0,
                 to=len(self._image_png)-1, resolution=1.0,
                 orient=tk.HORIZONTAL, length="%dc" % len(self._image_png),
                 width="0.5c"
                 ).pack()

        # buttom
        ttk.Button(root, text="Close View", command=root.destroy).pack()
        # Only for standalone scripts
        if not env.args.interactive:
            self._display_root.mainloop()

#
#* Build the machine and render
#
env = Environment(args)

left = Node(env, "left")
middle = Node(env, "middle")
right = Node(env, "right")

good = Channel(env)
bad = Channel(env)

left.outto(env, [(middle, good), (middle, bad)])
middle.outto(env, [(right, good), (right, bad)])

machine = Fsm(env, [left, middle, right], [good, bad])

render = RenderDot(env)

# Plain drawing, no signals, no state.
dot1 = machine.as_dot(env)
render.to_image(env, dot1)

# Send signal
left.signal(env, good)

if 0:
    # Manual propagation for testing and illustration

    # First node highlight
    dot1 = machine.as_dot(env)
    render.to_image(env, dot1)

    # First edge highlight from signal propagation
    machine.propagate(env)
    dot1 = machine.as_dot(env)
    render.to_image(env, dot1)

    # Second node highlight from signal propagation
    machine.propagate(env)
    dot1 = machine.as_dot(env)
    render.to_image(env, dot1)

# Propagate and render using a guess for steps
for i in range(6):
    dot1 = machine.as_dot(env)
    render.to_image(env, dot1)
    machine.propagate(env)
    
# Display
render.view(env)

# Write animation
if args.animated:
    render.to_gif(env, args.animated)


# # Second "good" edge highlight
# machine.propagate(env)
# dot1 = machine.as_dot(env)
# render.add_render(dot1)

# # Back to plain drawing
# machine.propagate(env)
# dot1 = machine.as_dot(env)
# render.add_render(dot1)
# render.finalize()
